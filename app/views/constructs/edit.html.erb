<!--
The main construct designer view.
TODO - Split parts bin into ORFS and Linkers
TODO - Sequence annotation
-->
<script> 
// TODO Figure out how to sequester this in another file.
// global variables

  var orfs;
  var linkers;
  var allparts;
  var partcoords=[]; //needed for getFormattedSequence() to store annotation info
                   //2d array [ [start, stop, name, type], [... ]]
  //if any changes made..
  var changes = false;
  var moving = false; //for sortable/tooltips

  $(document).ready(function() {

      setPlasmidWidth(0);

      //ajax call to load data
      $.ajax({
        type: 'get',
        dataType: 'json',
        url: '/constructs/get_data',
        success: function(data){
          orfs = data.orfs;
          linkers = data.linkers;
          allparts= orfs.concat(linkers);
          annotations = data.annotations;
          //get sequence
          $("#sequence").html(getFormattedSequence());
          
          //get images
          $(".part, .byte").css('background-image', function(index, value){
            for(i in allparts){
              var byte_id = $(this).attr('byte_id');
              if ( byte_id.split('_')[1] == allparts[i].id.toString()){
                return 'url(/images/'+ allparts[i].image_id +'.png)';
              }
            }
          });
        }
      })

      //save button
      $("a#save").click(function() {
        
        // TODO validation
        // sequence must be flanked by alpha and omega bytes - NEED A NEW DB COL FOR SPECIAL CLASS (ie ALPHA/OMEGA etc.)
        // or leave validation for server side?
        // require an ori?
        // require selection?

        var bytes = $('#parts_list').sortable('toArray', {attribute: 'class'});
         
        if (validate(bytes)){

          //submit to server
         $.ajax({
           type: 'put',
           dataType: 'json',
           data: $('#parts_list').sortable('serialize', {attribute: 'part_id'}) + '&'
                + $('#parts_list').sortable('serialize', {attribute: 'byte_id'}) + '&'
                + 'id=<%= @construct.id %>' + '&'
                + 'experiment_id=<%= @experiment.id %>',

            url: '/constructs/save',
            success: function(data){
              $("#parts_list > li").each(function(index) {
                $(this).attr('part_id', "part_"+data.part_ids[index]);
              })
              alert("Saved!");
            }
            

          
          })
        }
        else{
          alert("Construct is not valid!"); //todo: invalid message
        }
      })
    

      $("ol#parts_list").sortable({

        connectWith:  '#trash',
        tolerance: 'pointer',
        start: function(){
          $('.tooltip').hide();
          moving = true;
          //update plasmid width 
          setPlasmidWidth(1);
        },
        stop: function(){
          moving = false;
          //update plasmid width 
          setPlasmidWidth(0);

        },
        update: function(){

          //if dropped in a new part from bin
          $('ol#parts_list > .byte').each(function(){
            
            $(this).attr('title', $(this).attr('popup'));
            $(this).addClass('part').removeClass('byte').text('');
            $(this).tooltip({
              opacity: 0.9,
              onShow: function(){
                if (moving==true){
                  this.hide(); // temp. disable
                }
              }
           });

          });

          //changes=true; // for future "YOU've Neer saved yer changes!"
          

          $("#sequence").html(getFormattedSequence());

        }
  
      
      });

      $("*").disableSelection();
      
      
      $(".byte").draggable({ 	

        connectToSortable: 'ol#parts_list',
        revert: 'invalid',
        helper: "clone"

      });

      $("#trash").droppable({
        //TODO something is fucked up with these css classes...
        activeClass: 'ui-state-hover',
        hoverClass: 'ui-state-active',
        accept: '#parts_list > li',
        tolerance: 'pointer',
        drop: function(event, ui) {
          ui.draggable.attr()
          ui.draggable.remove();
          $("#parts_list").sortable('refresh');
        }
      }); 

      $(".part").tooltip({
        opacity: 0.9, 
        onShow: function(){
          if (moving==true){
            this.hide(); // temp. disable
          }
        }
      });

    
    });

</script>

<h1 id="title">Construct Designer v.0.6</h1>

<div id="construct">

<h1>Editing <%= @construct.name %>:</h1>

<div id="parts_box"><div class='xscrollbuffer'>
  <div id="plasmid-left">
  </div>
  <div id="plasmid-mid">
<!-- The sortable parts list.. -->
<ol id="parts_list">
<% @order.each do |part| %>
  <li id = "part_<%=part.bio_byte_id%>_<%=part.id%>" class = "<%=part.bio_byte.type %> part" byte_id="byte_<%=part.bio_byte_id%>" part_id="part_<%=part.id%>"
   title="<b><%=part.bio_byte.name%></b>
          <p><%=part.bio_byte.description%></p>
          <p><a href='<%= bio_byte_path(part.bio_byte) %>'>More Info</a></p>">
  </li>
<% end %>
</ol>
  </div>
  <div id="plasmid-right">
  </div>
</div></div>
</div>

<div id="sequence_box">
<h3>Sequence</h3>
<!-- Sequence box -->
<div id = "sequence">
</div>

</div>

<div id="parts_bin">
<!-- Parts Bin -->
<h2>Parts Bin:</h2>

<ul id="orf_bin" class="parts_bin">
<% ORF.all.each do |byte| %>
  <li id = "part_<%=byte.id%>_0" part_id="part_new" byte_id="byte_<%=byte.id%>" class = "ORF byte" popup="<b><%=byte.name%></b>
          <p><%=byte.description%></p>
          <p><a href='<%= bio_byte_path(byte) %>'>More Info</a></p>"><%= byte.name %></li>
<% end %>
</ul>

<ul id="linker_bin" class="parts_bin">
<% Linker.all.each do |byte| %>
  <li id = "part_<%=byte.id%>_0" part_id="part_new" byte_id="byte_<%=byte.id%>" class = "Linker byte"  popup="<b><%=byte.name%></b>
          <p><%=byte.description%></p>
          <p><a href='<%= bio_byte_path(byte) %>'>More Info</a></p>"><%= byte.name %></li>
<% end %>
</ul>

<div id="trash">
Trash Bin
</div>

</div>

<div id="nav">
<%= link_to "Back", :back %>
<a href="#", id="save">Save</a>
</div>
